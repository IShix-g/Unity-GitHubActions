name: (Reusable) Test Runner

on:
  workflow_call:
    inputs:
      unity-version:
        description: 'Version of Unity to use for testing the project. Use "auto" to get from your ProjectSettings/ProjectVersion.txt. ⚠️ If testing a Unity Package, this field is required and cannot be set to "auto". https://game.ci/docs/docker/versions/'
        required: false
        type: string
        default: 'auto'
      project-path:
        description: 'Specify the path to your Unity project or package to be tested. The path should be relative to the root of your project.'
        required: false
        type: string
        default: ''
      test-modes:
        description: 'Comma-separated test modes (e.g., playmode,editmode,standalone).'
        required: false
        type: string
        default: 'playmode,editmode'
      custom-parameters:
        description: 'Custom parameters to configure the test runner.  https://game.ci/docs/github/test-runner/#customparameters'
        required: false
        type: string
        default: ''
      coverage-options:
        description: 'Options for configuring code coverage. https://game.ci/docs/github/test-runner#coverageoptions'
        required: false
        type: string
        default: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport'
    secrets:
      UNITY_LICENSE:
        required: true
      UNITY_EMAIL:
        required: true
      UNITY_PASSWORD:
        required: true

jobs:
  print-unity-version:
    runs-on: ubuntu-22.04
    steps:
      - name: Print
        run: |
          unity_version=${{ inputs.unity-version }}
          echo "::notice title=Unity Version::$unity_version"

  prepare-test-modes:
    runs-on: ubuntu-22.04
    outputs:
      array: ${{ steps.set-array.outputs.array }}
    steps:
      - name: Convert test modes to array
        id: set-array
        run: |
          if [[ "${{ inputs.test-modes }}" == *","* ]]; then
            array='["'$(echo "${{ inputs.test-modes }}" | sed 's/,/","/g')'"]'
            echo "array=$array" >> $GITHUB_OUTPUT
          else
            array='["${{ inputs.test-modes }}"]'
            echo "array=$array" >> $GITHUB_OUTPUT
          fi
          echo "::notice title=Test Modes::$array"

  test-all:
    needs: [prepare-test-modes]
    name: Test in ${{ matrix.testMode }}
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        testMode: ${{ fromJson(needs.prepare-test-modes.outputs.array) }}

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
      - uses: actions/cache@v4
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}
          restore-keys: |
            Library-

      - uses: game-ci/unity-test-runner@v4
        id: tests
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          unityVersion: ${{ inputs.unity-version }}
          projectPath: ${{ inputs.projectPath }}
          testMode: ${{ matrix.testMode }}
          artifactsPath: ${{ matrix.testMode }}-artifacts
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: ${{ matrix.testMode }} Test Results
          coverageOptions: ${{ inputs.coverage-options }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Test results for ${{ matrix.testMode }}
          path: ${{ steps.tests.outputs.artifactsPath }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Coverage results for ${{ matrix.testMode }}
          path: ${{ steps.tests.outputs.coveragePath }}