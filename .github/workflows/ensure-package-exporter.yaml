name: Ensure PackageExporter in Release

on:
  workflow_dispatch:
  workflow_run:
    workflows:
      - "Manual Release (Merge to Default)"
      - "Manual Release and Build Package (Merge to Default)"
      - "Release via PR (Default Branch)"
    types:
      - completed

jobs:
  check-trigger:
    runs-on: ubuntu-22.04
    outputs:
      checked: ${{ steps.check_trigger.outputs.checked }}
    steps:
      - name: Check if trigger is workflow_dispatch
        id: check_trigger
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "::notice::Trigger is workflow_dispatch"
            echo "checked=1" >> $GITHUB_OUTPUT
          else
            echo "::notice::Trigger is not workflow_dispatch"
          fi

  check-last-commit-tag:
    runs-on: ubuntu-22.04
    outputs:
      tagged: ${{ steps.check_tag.outputs.tagged }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if last commit has a tag
        id: check_tag
        run: |
          TAGS=$(git tag --points-at HEAD)
          if [ -z "$TAGS" ]; then
            echo "::notice::No tags found on the last commit."
          else
            echo "::notice::Tags found on the last commit: $TAGS"
            echo "tagged=1" >> $GITHUB_OUTPUT
          fi

  check-package:
    needs: [check-trigger, check-last-commit-tag]
    if: ${{ needs.check-trigger.outputs.checked == '1' || needs.check-last-commit-tag.outputs.tagged == '1' }}
    runs-on: ubuntu-22.04
    outputs:
      file-present: ${{ steps.check-file.outputs.file-present }}
      closest-release: ${{ steps.find-release.outputs.closest-release }}
      latest-release: ${{ steps.find-release.outputs.latest-release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get all releases and search for PackageExporter
        id: find-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          all_releases=$(gh release list --json tagName --limit 50)
          release_tags=$(echo "$all_releases" | jq -r '.[].tagName')

          latest_release=""
          closest_release=""
          
          for tag in $release_tags; do
          release_info=$(gh release view "$tag" --json tagName,assets)

          if [ -z "$latest_release" ]; then
            latest_release="$tag"
            echo "latest-release=$latest_release" >> "$GITHUB_OUTPUT"
          fi

          match=$(echo "$release_info" | jq -r '.assets[].name | select(test("PackageExporter_.*\\.unitypackage"))')
          if [ -n "$match" ] && [ -z "$closest_release" ]; then
            closest_release="$tag"
            echo "Closest release found: $closest_release"
          fi
          done

          if [ -n "$closest_release" ]; then
            echo "closest-release=$closest_release" >> "$GITHUB_OUTPUT"
          else
            echo "No matching unitypackage found."
            echo "closest-release=" >> "$GITHUB_OUTPUT"
          fi

      - name: Check if PackageExporter exists in the latest release
        id: check-file
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          latest_release: ${{ steps.find-release.outputs.latest-release }}
        run: |
          release_info=$(gh release view "$latest_release" --json assets)
          file_present=$(echo "$release_info" | jq '.assets[].name | select(test("PackageExporter_.*\\.unitypackage"))')
          
          if [ -n "$file_present" ]; then
            echo "Unitypackage file found in the latest release."
            echo "file-present=1" >> "$GITHUB_OUTPUT"
          else
            echo "No Unitypackage found in the latest release."
          fi

  upload-package:
    needs: [check-trigger, check-last-commit-tag, check-package]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Handle PackageExporter Upload
        if: ${{ needs.check-package.outputs.file-present != '1' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          closest_release=${{ needs.check-package.outputs.closest-release }}
          latest_release=${{ needs.check-package.outputs.latest-release }}
          
          if [ -n "$closest_release" ]; then
            echo "Uploading from closest release ($closest_release) to the latest release ($latest_release)..."
            gh release download "$closest_release" --pattern "PackageExporter_*.unitypackage" -D ./temp-unitypackage
            gh release upload "$latest_release" ./temp-unitypackage/PackageExporter_*.unitypackage
            echo "Successfully uploaded the file to the latest release: $latest_release"
          else
            echo "No closest release found with a PackageExporter. Nothing to upload."
            exit 1
          fi