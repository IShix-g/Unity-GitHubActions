name: (Reusable) Unity C# Linter for Dispatch

on:
  workflow_call:
    inputs:
      base-branch:
        description: 'Target base branch for investigation'
        required: false
        type: string
        default: ''
      editorconfig-branch:
        description: 'Branch where .editorconfig is placed. If not specified, base-branch will be used.'
        required: false
        type: string
        default: ''
      include-paths:
        description: 'Comma-separated regex patterns for files or directories to include. More info: https://www.gnu.org/software/grep/manual/'
        required: false
        type: string
        default: 'Assets/.*'
      exclude-paths:
        description: 'Exclude files or directories (regex, comma-separated)'
        required: false
        type: string
        default: ''
      review-level:
        description: 'You can change the report level. [info,warning,error] https://github.com/reviewdog/reviewdog?tab=readme-ov-file#reporter-github-checks--reportergithub-pr-check'
        required: false
        type: string
        default: 'warning'
      review-exit-code:
        description: 'Exit code string based on reviewdog exit codes. [none,any,info,warning,error] https://github.com/reviewdog/reviewdog?tab=readme-ov-file#exit-codes'
        required: false
        type: string
        default: 'error'
      max-log-lines:
        description: 'Maximum number of lines to print from the log'
        required: false
        type: string
        default: '50'

permissions:
  checks: write
  issues: write

jobs:
  branch-conf:
    runs-on: ubuntu-22.04
    outputs:
      base-branch: ${{ steps.branch-conf.outputs.base-branch }}
      head-branch: ${{ steps.branch-conf.outputs.head-branch }}
      editorconfig-branch: ${{ steps.branch-conf.outputs.editorconfig-branch }}
    steps:
      - name: Branch Configuration
        id: branch-conf
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -n "${{ inputs.base-branch }}" ]; then
            base_branch="${{ inputs.base-branch }}"
          else
            base_branch=$(gh api /repos/${{ github.repository }} --jq '.base_branch')
          fi
          echo "base-branch=${base_branch#refs/heads/}" >> "$GITHUB_OUTPUT"

          if [ -n "${{ inputs.editorconfig-branch }}" ]; then
            editorconfig_branch="${{ inputs.editorconfig-branch }}"
          else
            editorconfig_branch=$base_branch
          fi
          echo "editorconfig-branch=${editorconfig_branch#refs/heads/}" >> "$GITHUB_OUTPUT"

          echo "Base Branch: $base_branch"
          echo "Editorconfig Branch: $editorconfig_branch"

  check-editorconfig:
    needs: [branch-conf]
    uses: ./.github/workflows/reusable-check-editorconfig.yaml
    with:
      ref: ${{ needs.branch-conf.outputs.editorconfig-branch }}
      max-retries: '3'
      retry-delay: '5'
      fail-on-missing: true
    secrets: inherit

  detect-cs-files:
    needs: [branch-conf, check-editorconfig]
    runs-on: ubuntu-22.04
    outputs:
      files: ${{ steps.detect-cs-files.outputs.files }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.branch-conf.outputs.base-branch }}
          fetch-depth: 0

      - name: Detect Changed C# Files
        id: detect-cs-files
        run: |
          files=$(find . -type f -name "*.cs" | sed 's|./||' || true)

          include_regexes=$(echo "${{ inputs.include-paths }}" | tr ',|;' '\n')
          exclude_regexes=$(echo "${{ inputs.exclude-paths }}" | tr ',|;' '\n')

          included_files=""
          for file in $files; do
            include_matched=false
            for regex in $include_regexes; do
              if [[ "$file" =~ $regex ]]; then
                include_matched=true
                break
              fi
            done

            exclude_matched=false
            for regex in $exclude_regexes; do
              if [[ "$file" =~ $regex ]]; then
                exclude_matched=true
                break
              fi
            done

            if $include_matched && ! $exclude_matched; then
              if [ -z "$included_files" ]; then
                included_files="$file"
              else
                included_files="$included_files|$file"
              fi
            fi
          done

          if [ -z "$included_files" ]; then
            echo "::notice::No files matched the include/exclude criteria."
            exit 0
          fi

          if [ "${#included_files}" -gt 100000 ]; then
            echo "File list is too long to output."
            echo -e "$included_files" > detected_files_list.txt
            echo "::error::Detected file list saved to detected_files_list.txt"
            exit 1
          else
            echo "files=$included_files" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload detected files list (on failure)
        if: ${{ failure() && hashFiles('detected_files_list.txt') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: detected-files
          path: detected_files_list.txt

  lint-cs-files:
    needs: [branch-conf, check-editorconfig, detect-cs-files]
    if: ${{ needs.detect-cs-files.outputs.files != '' }}
    uses: ./.github/workflows/reusable-lint-cs-files.yaml
    with:
      ref: ${{ needs.branch-conf.outputs.head-branch || needs.branch-conf.outputs.base-branch }}
      editorconfig-branch: ${{ needs.branch-conf.outputs.editorconfig-branch }}
      files: ${{ needs.detect-cs-files.outputs.files }}
      max-log-lines: ${{ inputs.max-log-lines }}
      review-reporter: 'github-check'
      review-level: ${{ inputs.review-level }}
      review-exit-code: ${{ inputs.review-exit-code }}