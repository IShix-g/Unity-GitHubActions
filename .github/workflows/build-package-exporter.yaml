name: Build Package Exporter

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Git tag you want to create (e.g., 1.0.0).'
        required: true
        type: string
      unity-version:
        description: 'Select the Unity version to use'
        required: true
        default: '2021.3.45f1'
        type: choice
        options:
          - '2021.3.45f1'
          - '2022.3.57f1'
          - '6000.0.37f1'
      include-default-branch:
        description: 'Include default branch in the action behavior. Set to true to include it.'
        type: boolean
        default: false
      dry-run:
        description: 'Dry Run: Set to true to simulate the merge without committing or pushing changes.'
        type: boolean
        default: false

jobs:
  verify-branch:
    runs-on: ubuntu-22.04
    steps:
      - name: Check if ref is default branch
        env:
          REF: ${{ github.ref }}
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        run: |
          include=${{ inputs.include-default-branch }}

          if [ "$include" = 'true' ]; then
            exit 0
          fi

          ref=${REF#refs/heads/}

          if [ "$ref" = "$DEFAULT_BRANCH" ]; then
            echo "::error::Cannot proceed on default branch. ($DEFAULT_BRANCH)"
            echo "::error::If you want to target the default branch ($DEFAULT_BRANCH), please turn on 'Include default branch'."
            echo "Target branch: $ref"
            echo "Default branch: $DEFAULT_BRANCH"
            exit 1
          fi

  latest-release:
    needs: verify-branch
    runs-on: ubuntu-22.04
    outputs:
      tag: ${{ steps.latest-release.outputs.tag }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Get Latest Release
        id: latest-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest_release=$(gh release view --json tagName -q ".tagName")
          echo "tag=$latest_release" >> "$GITHUB_OUTPUT"
          echo "::notice title=Latest release::$latest_release"

  update-packagejson:
    needs: [verify-branch, latest-release]
    uses: ./.github/workflows/reusable-update-packagejson.yaml
    secrets:
      BOT_APP_ID: ${{ secrets.BOT_APP_ID }}
      BOT_PRIVATE_KEY: ${{ secrets.BOT_PRIVATE_KEY }}
    with:
      ref: ${{ github.ref }}
      file-path: ./Assets/PackageExporter/package.json
      tag: ${{ inputs.tag }}
      dry-run: ${{ inputs.dry-run }}
      require-validation: false
      commit-message-format: 'Update the Package Exporter package.json to {v}'

  build-package:
    needs: [verify-branch, latest-release, update-packagejson]
    uses: ./.github/workflows/reusable-build-package.yaml
    secrets:
      UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
      UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
    with:
      package-name: PackageExporter
      tag: ${{ needs.update-packagejson.outputs.normalized-tag }}
      unity-version: ${{ inputs.unity-version }}
      commit-id: ${{ needs.update-packagejson.outputs.sha }}
      retention-days: 1

  merge-and-push:
    needs: [verify-branch, latest-release, update-packagejson, build-package]
    uses: ./.github/workflows/reusable-merge-and-push.yaml
    secrets:
      BOT_APP_ID: ${{ secrets.BOT_APP_ID }}
      BOT_PRIVATE_KEY: ${{ secrets.BOT_PRIVATE_KEY }}
    with:
      target-branch: ${{ github.ref }}
      push-branch: ${{ github.event.repository.default_branch }}
      commit-id: ${{ needs.update-packagejson.outputs.sha }}
      dry-run: ${{ inputs.dry-run }}

  upload-package:
    needs: [verify-branch, latest-release, update-packagejson, build-package, merge-and-push]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for Existing Package
        id: check-package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest_release="${{ needs.latest-release.outputs.tag }}"
          file_name="PackageExporter_.*\\.unitypackage"
          asset_url=$(gh release view "$latest_release" --json assets -q ".assets[].name" | grep -E "$file_name" || echo "")
          if [[ -n "$asset_url" ]]; then
            echo "found=1" >> "$GITHUB_OUTPUT"
          fi

      - name: Delete Existing Package File
        if: ${{ !inputs.dry-run && steps.check-package.outputs.found == '1' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest_release="${{ needs.latest-release.outputs.tag }}"
          file_name="PackageExporter_.*\\.unitypackage"
          current_file_name=$(gh release view "$latest_release" --json assets -q ".assets[].name" | grep -E "$file_name")
          if [[ -n "$current_file_name" ]]; then
            gh release delete-asset "$latest_release" "$current_file_name"
            echo "::notice title=Removed asset::$current_file_name"
          else
            echo "::notice title=Not removed asset::No matching asset found to remove."
          fi

      - uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-package.outputs.package-name }}

      - name: Upload New Package
        if: ${{ !inputs.dry-run }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          new_file="./${{ needs.build-package.outputs.package-name }}"
          latest_release="${{ needs.latest-release.outputs.tag }}"
          gh release upload "$latest_release" "$new_file"
          echo "::notice title=Uploaded new asset::$new_file"
