name: Unity-CSharp-Linter

on:
  pull_request:
    branches:
      - main

jobs:
  unity-csharp-linter:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - name: Install .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0'

      - name: Create Temporary csproj for Analysis
        run: |
          echo "<Project Sdk=\"Microsoft.NET.Sdk\">" > TempProject.csproj
          echo "  <PropertyGroup>" >> TempProject.csproj
          echo "    <TargetFramework>net6.0</TargetFramework>" >> TempProject.csproj
          echo "    <EnableDefaultCompileItems>false</EnableDefaultCompileItems>" >> TempProject.csproj
          echo "  </PropertyGroup>" >> TempProject.csproj
          echo "</Project>" >> TempProject.csproj

      - name: Install StyleCop and dotnet-format
        run: |
          dotnet new tool-manifest
          dotnet tool install dotnet-format
          dotnet add package StyleCop.Analyzers

      - name: Detect Changed C# Files
        id: detect_cs_files
        run: |
          files=$(git diff --name-only origin/main...HEAD | grep '\.cs$' || true)

          if [ -z "$files" ]; then
            echo "No C# files were changed in this PR."
            exit 0
          fi

          length=$(echo "$files" | wc -l)
          echo "::notice title=Detected changed C# files.::$length files"

          echo "::group::Detected changed C# files."
            echo "$files"
          echo "::endgroup::"
          echo "files=$files" >> "$GITHUB_OUTPUT"

      - name: Update Temporary csproj with Changed Files
        if: ${{ steps.detect_cs_files.outputs.files != '' }}
        run: |
          echo "Adding modified C# files to TempProject.csproj..."
          sed -i '$d' TempProject.csproj # Remove last line
          echo "  <ItemGroup>" >> TempProject.csproj
          for file in ${{ steps.detect_cs_files.outputs.files }}; do
            echo "    <Compile Include=\"$file\" />" >> TempProject.csproj
          done
          echo "  </ItemGroup>" >> TempProject.csproj
          echo "</Project>" >> TempProject.csproj

      - name: Collect Style Violations Log
        if: steps.detect_cs_files.outputs.files != ''
        run: |
          echo "Collecting style violations into output.log..."
          touch output.log
          for file in ${{ steps.detect_cs_files.outputs.files }}; do
            echo "Analyzing $file" >> output.log
            dotnet format --include $file --verify-no-changes >> output.log 2>&1 || echo "Style violation detected in $file" >> output.log
          done

      - name: Debug Raw Output Log
        if: steps.detect_cs_files.outputs.files != ''
        run: |
          echo "=== DEBUG RAW OUTPUT.LOG ==="
          cat output.log
          echo "=== END RAW OUTPUT.LOG ==="

      - name: Format Style Violations Log
        if: steps.detect_cs_files.outputs.files != ''
        run: |
          echo "Formatting output log for reviewdog..."
          touch formatted_output.log
          cat output.log | sed -E 's/^(.*):([0-9]+),([0-9]+): (error|warning) ([^:]+): (.*) \[.*\]/\1:\2:\3: \4: \6/' > formatted_output.log
      
      - name: Debug Formatted Log
        if: steps.detect_cs_files.outputs.files != ''
        run: |
          echo "=== DEBUG FORMATTED LOG ==="
          cat formatted_output.log
          echo "=== END FORMATTED LOG ==="

      - name: Apply Style Suggestions with reviewdog
        if: steps.detect_cs_files.outputs.files != ''
        uses: reviewdog/action-suggester@v1
        with:
          tool_name: stylecop
          suggest_command: |
            cat formatted_output.log
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup temporary files
        if: ${{ steps.detect_cs_files.outputs.files != '' }}
        run: |
          rm -f TempProject.csproj output.log formatted_output.log || true