name: Unity-CSharp-Linter

on:
  pull_request:
    branches:
      - main

jobs:
  unity-csharp-linter:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - name: Install dotnet-format
        run: |
          dotnet new tool-manifest
          dotnet tool install dotnet-format

      - name: Install reviewdog
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest

      - name: Detect Changed C# Files
        id: detect_cs_files
        run: |
          files=$(git diff --name-only origin/main...HEAD | grep '\.cs$' || true)

          if [ -z "$files" ]; then
            echo "No C# files were changed in this PR."
            exit 0
          fi

          length=$(echo "$files" | wc -l)
          echo "::notice title=Detected changed C# files.::$length files"

          echo "::group::Detected changed C# files."
            echo "$files"
          echo "::endgroup::"
          echo "files=$files" >> "$GITHUB_OUTPUT"

      - name: Create Temporary csproj for Analysis
        if: ${{ steps.detect_cs_files.outputs.files != '' }}
        run: |
          echo "<Project Sdk=\"Microsoft.NET.Sdk\">" > TempProject.csproj
          echo "  <PropertyGroup>" >> TempProject.csproj
          echo "    <TargetFramework>net6.0</TargetFramework>" >> TempProject.csproj
          echo "    <EnableDefaultCompileItems>false</EnableDefaultCompileItems>" >> TempProject.csproj
          echo "  </PropertyGroup>" >> TempProject.csproj
          echo "  <ItemGroup>" >> TempProject.csproj
          for file in ${{ steps.detect_cs_files.outputs.files }}; do
            echo "    <Compile Include=\"$file\" />" >> TempProject.csproj
          done
          echo "  </ItemGroup>" >> TempProject.csproj
          echo "</Project>" >> TempProject.csproj

      - name: Analyze C# Code using dotnet-format
        id: analyze_with_dotnet_format
        if: ${{ steps.detect_cs_files.outputs.files != '' }}
        run: |
          dotnet format TempProject.csproj \
          --verify-no-changes \
          --verbosity diagnostic > format-results.log

      - name: Debug dotnet-format log
        if: ${{ steps.detect_cs_files.outputs.files != '' }}
        run: |
          cat format-results.log

      - name: Run reviewdog for dotnet-format
        run: |
          reviewdog \
            -name="dotnet-format" \
            -reporter=github-pr-review \
            -filter-mode=file \
            -fail-on-error=false \
            -efm="%f(%l,%c): %m"
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup temporary files
        if: ${{ steps.detect_cs_files.outputs.files != '' }}
        run: |
          rm -f TempProject.csproj format-results.log