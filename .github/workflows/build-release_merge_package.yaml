name: Manual Release and Build Package (Merge to Default)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Git tag you want to create (e.g., 1.0.0).'
        required: true
        type: string
      clean-branch:
        description: 'Delete the branch? All branches except the default branch will be deleted.'
        default: false
        type: boolean
      fast-forward:
        description: 'Allow fast-forward merge'
        type: boolean
        default: false
      include-default-branch:
        description: 'Include default branch in the action behavior. Set to true to include it.'
        type: boolean
        default: false
      dry-run:
        description: 'Dry Run: Set to true to simulate the merge without committing or pushing changes.'
        type: boolean
        default: false
      draft-release:
        description: 'true = Draft release; false = Non-draft release.'
        type: boolean
        default: false

permissions:
  actions: read
  contents: write

jobs:
  validate-branch:
    runs-on: ubuntu-22.04
    steps:
      - name: Check if ref is default branch
        env:
          REF: ${{ github.ref }}
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        run: |
          include=${{ inputs.include-default-branch }}

          if [ "$include" = 'true' ]; then
            exit 0
          fi

          ref=${REF#refs/heads/}

          if [ "$ref" = "$DEFAULT_BRANCH" ]; then
            echo "::error::Cannot proceed on default branch. ($DEFAULT_BRANCH)"
            echo "::error::If you want to target the default branch ($DEFAULT_BRANCH), please turn on 'Include default branch'."
            echo "Target branch: $ref"
            echo "Default branch: $DEFAULT_BRANCH"
            exit 1
          fi

  update-packagejson:
    needs: [validate-branch]
    uses: IShix-g/Unity-GitHubActions/.github/workflows/reusable-update-packagejson.yaml@main
    secrets:
      BOT_APP_ID: ${{ secrets.BOT_APP_ID }}
      BOT_PRIVATE_KEY: ${{ secrets.BOT_PRIVATE_KEY }}
    with:
      ref: ${{ github.ref }}
      file-path: ./Packages/SimplePackage/package.json
      tag: ${{ inputs.tag }}
      dry-run: ${{ inputs.dry-run }}

  merge-and-push:
    needs: [validate-branch, update-packagejson]
    uses: IShix-g/Unity-GitHubActions/.github/workflows/reusable-merge-and-push.yaml@main
    secrets:
      BOT_APP_ID: ${{ secrets.BOT_APP_ID }}
      BOT_PRIVATE_KEY: ${{ secrets.BOT_PRIVATE_KEY }}
    with:
      target-branch: ${{ github.ref }}
      push-branch: ${{ github.event.repository.default_branch }}
      commit-id: ${{ needs.update-packagejson.outputs.sha }}
      dry-run: ${{ inputs.dry-run }}
      fast-forward: ${{ inputs.fast-forward }}

  build-package:
    needs: [validate-branch, update-packagejson, merge-and-push]
    uses: IShix-g/Unity-GitHubActions/.github/workflows/reusable-build-package.yaml@main
    secrets:
      UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
      UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
    with:
      package-name: TestPackage
      tag: ${{ needs.update-packagejson.outputs.normalized-tag }}
      unity-version: ${{ inputs.unity-version }}
      commit-id: ${{ needs.update-packagejson.outputs.sha }}

  release-notes:
    needs: [validate-branch, update-packagejson, merge-and-push, build-package]
    uses: IShix-g/Unity-GitHubActions/.github/workflows/reusable-release-notes.yaml@main
    with:
      commit-id: ${{ needs.update-packagejson.outputs.sha }}

  create-release:
    needs: [validate-branch, update-packagejson, merge-and-push, build-package, release-notes]
    uses: IShix-g/Unity-GitHubActions/.github/workflows/reusable-create-release.yaml@main
    secrets:
      BOT_APP_ID: ${{ secrets.BOT_APP_ID }}
      BOT_PRIVATE_KEY: ${{ secrets.BOT_PRIVATE_KEY }}
    with:
      commit-id: ${{ needs.merge-and-push.outputs.sha }}
      dry-run: ${{ inputs.dry-run }}
      tag: ${{ needs.update-packagejson.outputs.normalized-tag }}
      release-note: ${{ needs.release-notes.outputs.notes }}
      draft-release: ${{ inputs.draft-release }}

  upload-package:
    needs: [validate-branch, update-packagejson, merge-and-push, build-package, release-notes, create-release]
    uses: IShix-g/Unity-GitHubActions/.github/workflows/reusable-release-package-upload.yaml@main
    with:
      release-tag: ${{ needs.update-packagejson.outputs.normalized-tag }}
      artifact-package-name: ${{ needs.build-package.outputs.package-name }}
      dry-run: ${{ inputs.dry-run }}

  clean-branch:
    needs: [validate-branch, update-packagejson, merge-and-push, build-package, release-notes, create-release, upload-package]
    if: ${{ inputs.clean-branch && needs.update-packagejson.outputs.changed == '1' }}
    uses: IShix-g/Unity-GitHubActions/.github/workflows/reusable-clean-branch.yaml@main
    secrets:
      BOT_APP_ID: ${{ secrets.BOT_APP_ID }}
      BOT_PRIVATE_KEY: ${{ secrets.BOT_PRIVATE_KEY }}
    with:
      branch: ${{ github.ref }}