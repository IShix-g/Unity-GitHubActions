name: (Reusable) Create Release

on:
  workflow_call:
    inputs:
      commit-id:
        description: 'Commit ID to create a release and tag.'
        required: true
        type: string
      dry-run:
        description: 'true = no upload; false = draft changes and delete the release after WAIT_BEFORE_DELETE seconds.'
        required: true
        type: boolean
      require-validation:
        description: 'true requires validation to pass; false allows continuing even if validation fails.'
        required: false
        type: boolean
        default: true
      wait-before-delete:
        description: 'Wait time in seconds before deleting the branch'
        required: false
        default: 25
        type: number
      tag:
        description: 'Git tag to create (e.g., 1.0.0).'
        required: true
        type: string
      release-format: # see: https://docs.github.com/en/actions/learn-github-actions/expressions#format
        description: 'Format of the release title. If "Ver.{0}" is specified, the title will be "Ver.1.0.0". Use "{0}" for no prefix.'
        required: false
        type: string
        default: 'Ver.{0}'
      release-note:
        description: 'Custom release note to include in the release.'
        required: false
        type: string
      draft-release:
        description: 'true = Draft release; false = Non-draft release.'
        required: false
        type: boolean
        default: false
    secrets:
      BOT_APP_ID:
        required: false
      BOT_PRIVATE_KEY:
        required: false

jobs:
  validate:
    uses: ./.github/workflows/reusable-validate-tag.yaml
    with:
      tag: ${{ inputs.tag }}
      require-validation: ${{ inputs.require-validation }}
    secrets: inherit

  create-release:
    needs: [validate]
    env:
      GH_REPO: ${{ github.repository }}
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    steps:
      - name: Check secrets availability
        id: check-secrets
        run: |
          if [ -n "${{ secrets.BOT_APP_ID }}" ] && [ -n "${{ secrets.BOT_PRIVATE_KEY }}" ]; then
            echo "available=1" >> "$GITHUB_OUTPUT"
          fi

      - name: Generate Token
        id: app-token
        if: ${{ steps.check-secrets.outputs.available == '1' }}
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.BOT_APP_ID }}
          private-key: ${{ secrets.BOT_PRIVATE_KEY }}

      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commit-id }}
          persist-credentials: ${{ steps.check-secrets.outputs.available != '1' }}
          fetch-depth: 0

      - name: Configure Git Authentication with Custom Token
        if: ${{ steps.check-secrets.outputs.available == '1' }}
        run: |
          git config --global url."https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/".insteadOf "https://github.com/"

      - name: Check If Tag Exists
        id: check-tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag="${{ inputs.tag }}"

          if git ls-remote --tags origin "refs/tags/$tag" | grep -q "refs/tags/$tag"; then
            echo "Tag '$tag' exists in the remote repository."
            echo "exists=1" >> "$GITHUB_OUTPUT"
          fi

      - name: Reassign Tag
        id: reassign-tag
        if: ${{ steps.check-tag.outputs.exists == '1' }}
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}
        run: |
          tag="${{ inputs.tag }}"
          commit_id="${{ inputs.commit-id }}"

          if git rev-parse "$tag" >/dev/null 2>&1; then
            echo "Deleting existing local tag '$tag'..."
            git tag -d "$tag" || {
              echo "::error::Failed to delete the existing local tag '$tag'. Exiting."
              exit 1
            }
            echo "Deleted the existing local tag '$tag'."
          fi

          echo "Deleting existing remote tag '$tag'..."
          git push origin --delete "$tag" || {
            echo "::error::Failed to delete the remote tag '$tag'. Exiting."
            exit 1
          }
          echo "Successfully deleted the remote tag '$tag'."

          git tag "$tag" "$commit_id" || {
            echo "::error::Unable to create the tag '$tag' on commit '$commit_id'. Exiting."
            exit 1
          }
          echo "Tag '$tag' created on commit '$commit_id'."

          echo "Pushing new tag '$tag' to remote..."
          git push origin "$tag" || {
            echo "::error::Failed to push the updated tag '$tag' to remote. Exiting."
            exit 1
          }
          echo "::notice::Tag '$tag' successfully reassigned and pushed to remote on commit '$commit_id'."

      - name: Create Tag
        if: ${{ steps.check-tag.outputs.exists != '1' }}
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}
        run: |
          tag="${{ needs.validate.outputs.normalized-tag }}"
          git tag "$tag" ${{ inputs.commit-id }}
          
          if git push origin "$tag"; then
            echo "::notice::Successfully created and pushed tag '$tag'."
          else
            echo "::error::Failed to push new tag '$tag'. Exiting."
            exit 1
          fi

      - name: Create Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          draft_flag=""
          if [[ "${{ inputs.dry-run }}" == "true" || "${{ inputs.draft-release }}" == "true" ]]; then
            draft_flag="--draft"
          fi

          gh release create ${{ needs.validate.outputs.normalized-tag }} $draft_flag \
            --verify-tag \
            --title "${{ format(inputs.release-format, needs.validate.outputs.normalized-tag) }}" \
            --generate-notes \
            --notes "${{ inputs.release-note }}"

          echo "::notice::Release '${{ needs.validate.outputs.normalized-tag }}' has been successfully created!"

      - name: Wait and Verify Release Name is expected
        if: ${{ success() }}
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}
        run: |
          sleep 5s
          actual=$(gh api --paginate /repos/${{ github.repository }}/releases?per_page=100 --jq '.[] | select(.tag_name == "${{ needs.validate.outputs.normalized-tag }}") | .name')
          expected="${{ format(inputs.release-format, needs.validate.outputs.normalized-tag) }}"
          if [[ "$actual" != "$expected" ]]; then
            echo "::error::Error: The release name does not match the expected value. Expected: '$expected', Actual: '$actual'."
            exit 1
          else
            echo "::notice::Success: The release name matches the expected value! Expected: '$expected', Actual: '$actual'."
          fi

      - name: Clean up. Wait ${{ inputs.wait-before-delete }}s and delete release if dry-run. (dry-run=${{ inputs.dry-run }}})
        if: ${{ inputs.dry-run && success() }}
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}
        run: |
          if gh release list | grep Draft | grep ${{ needs.validate.outputs.normalized-tag }}; then
            echo "::notice::Release '${{ needs.validate.outputs.normalized-tag }}' found. Waiting ${{ inputs.wait-before-delete }} seconds before initiating deletion..."
            sleep ${{ inputs.wait-before-delete }}
            if gh release list | grep Draft | grep ${{ needs.validate.outputs.normalized-tag }}; then
              gh release delete ${{ needs.validate.outputs.normalized-tag }} --yes --cleanup-tag
              echo "::notice::Release '${{ needs.validate.outputs.normalized-tag }}' successfully deleted."
            else
              echo "::notice::Release '${{ needs.validate.outputs.normalized-tag }}' no longer exists. Skipping deletion."
            fi
          else
            echo "::warning::Release '${{ needs.validate.outputs.normalized-tag }}' does not exist. Skipping cleanup."
          fi

      - name: Clean up release after failure
        if: ${{ failure() }}
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}
        run: |
          if gh release list | grep Draft | grep ${{ needs.validate.outputs.normalized-tag }}; then
            echo "::notice::Detected failure. Skipping wait and proceeding to deletion."
            gh release delete ${{ needs.validate.outputs.normalized-tag }} --yes --cleanup-tag
          else
            echo "::notice::Release '${{ needs.validate.outputs.normalized-tag }}' does not exist. Skipping cleanup."
          fi