name: (Reusable) Unity C# Linter

on:
  workflow_call:
    inputs:
      head-branch:
        description: 'Target head branch for investigation'
        required: false
        type: string
        default: ''
      base-branch:
        description: 'Target base branch for investigation'
        required: false
        type: string
        default: ''
      include_paths:
        description: 'Include files or directories (regex, comma-separated). For more information https://www.gnu.org/software/grep/manual/'
        required: false
        type: string
        default: 'Assets/.*'
      exclude_paths:
        description: 'Exclude files or directories (regex, comma-separated)'
        required: false
        type: string
        default: ''

jobs:
  set-branch:
    runs-on: ubuntu-22.04
    outputs:
      base-branch: ${{ steps.set-branch.outputs.base-branch }}
      head-branch: ${{ steps.set-branch.outputs.head-branch }}
    steps:
      - name: Set Base Branch
        id: set-branch
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}
        run: |
          if [ -n "${{ inputs.base-branch }}" ]; then
            base_branch="${{ inputs.base-branch }}"
          else
            base_branch=$(gh api /repos/${{ github.repository }} --jq '.base_branch')
          fi
          echo "base-branch=${base_branch#refs/heads/}" >> "$GITHUB_OUTPUT"

          if [ -n "${{ inputs.head-branch }}" ]; then
            head_branch="${{ inputs.head-branch }}"
            echo "head-branch=${head_branch#refs/heads/}" >> "$GITHUB_OUTPUT"
          fi

          echo "::notice title=Base Branch::$base_branch"
          echo "::notice title=Head Branch::$head_branch"

  check-editorconfig:
    needs: [set-branch]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.set-branch.outputs.base-branch }}

      - name: Validate .editorconfig file
        run: |
          if [ ! -f .editorconfig ]; then
            echo "::error title=.editorconfig Missing::The root of the repository is missing an .editorconfig file. For reference, you can look at: https://github.com/IShix-g/Unity-GitHubActions/blob/main/.editorconfig"
            exit 1
          else
            echo ".editorconfig file exists at the root of the repository."
          fi

  lint-cs-files:
    needs: [set-branch, check-editorconfig]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.set-branch.outputs.head-branch || needs.set-branch.outputs.base-branch }}
          fetch-depth: 0

      - name: Detect Changed C# Files
        id: detect-cs-files
        run: |
          files=$(git diff --name-only origin/${{ needs.set-branch.outputs.base-branch }}...${{ needs.set-branch.outputs.head-branch || 'HEAD' }} | grep '\.cs$' || true)
          if [ -z "$files" ]; then
            echo "No C# files were changed in this PR."
            exit 0
          fi

          include_regexes=$(echo "${{ inputs.include_paths }}" | tr ',' '\n')
          exclude_regexes=$(echo "${{ inputs.exclude_paths }}" | tr ',' '\n')

          included_files=""
          for file in $files; do
            include_matched=false
            exclude_matched=false

            for regex in $include_regexes; do
              if [[ "$file" =~ $regex ]]; then
                include_matched=true
              fi
            done

            for regex in $exclude_regexes; do
              if [[ "$file" =~ $regex ]]; then
                exclude_matched=true
              fi
            done

            if $include_matched && ! $exclude_matched; then
              included_files+="${file}\n"
            fi
          done

          if [ -z "$included_files" ]; then
            echo "No C# files matched the include/exclude criteria."
            exit 0
          fi

          included_files=$(echo -e "$included_files" | sed '/^\s*$/d')
          echo "files=$(echo $included_files | tr '\n' ',')" >> "$GITHUB_OUTPUT"

      - name: Create Temporary csproj for Analysis
        if: ${{ steps.detect-cs-files.outputs.files != '' }}
        run: |
          echo "<Project Sdk=\"Microsoft.NET.Sdk\">" > TempProject.csproj
          echo "  <PropertyGroup>" >> TempProject.csproj
          echo "    <TargetFramework>netstandard2.1</TargetFramework>" >> TempProject.csproj
          echo "    <EnableDefaultCompileItems>false</EnableDefaultCompileItems>" >> TempProject.csproj
          echo "  </PropertyGroup>" >> TempProject.csproj
          echo "  <ItemGroup>" >> TempProject.csproj
          IFS=',' read -ra files <<< "${{ steps.detect-cs-files.outputs.files }}"
          for file in "${files[@]}"; do
            echo "    <Compile Include=\"$file\" />" >> TempProject.csproj
          done
          echo "  </ItemGroup>" >> TempProject.csproj
          echo "</Project>" >> TempProject.csproj

      - name: Install .NET SDK
        if: ${{ steps.detect-cs-files.outputs.files != '' }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0'

      - name: Install StyleCop and dotnet-format
        if: ${{ steps.detect-cs-files.outputs.files != '' }}
        run: |
          dotnet new tool-manifest
          dotnet tool install dotnet-format
          dotnet add package StyleCop.Analyzers

      - name: Collect Style Violations Log
        if: ${{ steps.detect-cs-files.outputs.files != '' }}
        run: |
          echo "Collecting style violations into output.log..."
          dotnet format TempProject.csproj --verify-no-changes >> output.log 2>&1 \
            || echo "Style violation detected" >> output.log

      - name: Debug Raw Output Log
        if: ${{ steps.detect-cs-files.outputs.files != '' }}
        run: |
          echo "=== DEBUG RAW OUTPUT.LOG ==="
          cat output.log
          echo "=== END RAW OUTPUT.LOG ==="

      - name: Checkout SARIF Conversion Script Repository
        if: ${{ steps.detect-cs-files.outputs.files != '' }}
        uses: actions/checkout@v4
        with:
          repository: IShix-g/Unity-GitHubActions
          ref: main
          path: sarif-script-repo

      - name: Verify `convert_to_sarif.py` Exists
        if: ${{ steps.detect-cs-files.outputs.files != '' }}
        run: |
          if [ ! -f sarif-script-repo/.github/scripts/convert_to_sarif.py ]; then
            echo "::error::convert_to_sarif.py script is missing in the target repository."
            exit 1
          fi

      - name: Convert to SARIF
        if: ${{ steps.detect-cs-files.outputs.files != '' }}
        run: |
          python3 sarif-script-repo/.github/scripts/convert_to_sarif.py output.log output.sarif

      - name: Setup reviewdog
        if: ${{ steps.detect-cs-files.outputs.files != '' }}
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest

      - name: Apply Style Suggestions with reviewdog
        if: ${{ steps.detect-cs-files.outputs.files != '' }}
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          reviewdog -f=sarif \
            -name="StyleCop" \
            -reporter=github-pr-review \
            -filter-mode=file \
            -level=warning \
            -fail-level=error \
            < output.sarif

      - name: Cleanup temporary files
        if: ${{ steps.detect-cs-files.outputs.files != '' }}
        run: |
          rm -f TempProject.csproj output.log output.sarif || true
