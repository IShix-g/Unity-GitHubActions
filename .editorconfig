# EditorConfig is awesome: https://editorconfig.org
# IDE0055 reports many issues related to spaces and line breaks, so it is disabled.

# top-most EditorConfig file
root = true

# General
[*]
charset = utf-8
end_of_line = lf
insert_final_newline = true
indent_style = space
indent_size = 2

[*.cs]
trim_trailing_whitespace = false
insert_final_newline = true
indent_style = space
indent_size = 4
tab_width = 4

# Organize usings
dotnet_separate_import_directive_groups = false
dotnet_sort_system_directives_first = false
file_header_template = unset

# this. and Me. preferences
dotnet_style_qualification_for_event = false
dotnet_style_qualification_for_field = false
dotnet_style_qualification_for_method = false
dotnet_style_qualification_for_property = false

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true
dotnet_style_predefined_type_for_member_access = true

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity
dotnet_style_parentheses_in_other_operators = never_if_unnecessary
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members

# Expression-level preferences
dotnet_style_coalesce_expression = true
dotnet_style_collection_initializer = true
dotnet_style_explicit_tuple_names = true
dotnet_style_namespace_match_folder = true
dotnet_style_null_propagation = true
dotnet_style_object_initializer = true
dotnet_style_operator_placement_when_wrapping = beginning_of_line
dotnet_style_prefer_auto_properties = true
dotnet_style_prefer_collection_expression = when_types_loosely_match
dotnet_style_prefer_compound_assignment = true
dotnet_style_prefer_conditional_expression_over_assignment = true
dotnet_style_prefer_conditional_expression_over_return = true
dotnet_style_prefer_foreach_explicit_cast_in_source = when_strongly_typed
dotnet_style_prefer_inferred_anonymous_type_member_names = true
dotnet_style_prefer_inferred_tuple_names = true
dotnet_style_prefer_is_null_check_over_reference_equality_method = true
dotnet_style_prefer_simplified_boolean_expressions = true
dotnet_style_prefer_simplified_interpolation = true

# Field preferences
dotnet_style_readonly_field = true

# Parameter preferences
dotnet_code_quality_unused_parameters = all:silent

# Suppression preferences
dotnet_remove_unnecessary_suppression_exclusions = none

# New line preferences
dotnet_style_allow_multiple_blank_lines_experimental = true
dotnet_style_allow_statement_immediately_after_block_experimental = true

#### C# Coding Conventions ####

# var preferences
csharp_style_var_elsewhere = false
csharp_style_var_for_built_in_types = false
csharp_style_var_when_type_is_apparent = false

# Expression-bodied members
csharp_style_expression_bodied_accessors = true
csharp_style_expression_bodied_constructors = false
csharp_style_expression_bodied_indexers = true
csharp_style_expression_bodied_lambdas = true
csharp_style_expression_bodied_local_functions = false
csharp_style_expression_bodied_methods = false
csharp_style_expression_bodied_operators = false
csharp_style_expression_bodied_properties = true

# Pattern matching preferences
csharp_style_pattern_matching_over_as_with_null_check = true
csharp_style_pattern_matching_over_is_with_cast_check = true
csharp_style_prefer_extended_property_pattern = true
csharp_style_prefer_not_pattern = true
csharp_style_prefer_pattern_matching = true
csharp_style_prefer_switch_expression = true

# Null-checking preferences
csharp_style_conditional_delegate_call = true

# Modifier preferences
csharp_prefer_static_local_function = true
csharp_preferred_modifier_order = public,private,protected,internal,file,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,required,volatile,async
csharp_style_prefer_readonly_struct = true
csharp_style_prefer_readonly_struct_member = true

# Code-block preferences
csharp_prefer_braces = true
csharp_prefer_simple_using_statement = true
csharp_style_namespace_declarations = block_scoped
csharp_style_prefer_method_group_conversion = true
csharp_style_prefer_primary_constructors = true
csharp_style_prefer_top_level_statements = true

# Expression-level preferences
csharp_prefer_simple_default_expression = true
csharp_style_deconstructed_variable_declaration = true
csharp_style_implicit_object_creation_when_type_is_apparent = true
csharp_style_inlined_variable_declaration = true
csharp_style_prefer_index_operator = true
csharp_style_prefer_local_over_anonymous_function = true
csharp_style_prefer_null_check_over_type_check = true
csharp_style_prefer_range_operator = true
csharp_style_prefer_tuple_swap = true
csharp_style_prefer_utf8_string_literals = true
csharp_style_throw_expression = true
csharp_style_unused_value_assignment_preference = discard_variable
csharp_style_unused_value_expression_statement_preference = discard_variable

# 'using' directive preferences
csharp_using_directive_placement = outside_namespace

# New line preferences
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = true
csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = true
csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = true
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = true
csharp_style_allow_embedded_statements_on_same_line_experimental = true

#### C# Formatting Rules ####

# New line preferences
csharp_new_line_before_catch = true
csharp_new_line_before_else = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace = all
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_labels = one_less_than_current
csharp_indent_switch_labels = true

# Space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Wrapping preferences
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = true


# C# Naming Rules (Classes and Interfaces) =================

# Public classes
dotnet_naming_rule.public_classes.style = pascal_case
dotnet_naming_rule.public_classes.symbols = public_classes
dotnet_naming_rule.public_classes.severity = error
dotnet_naming_symbols.public_classes.applicable_kinds = class
dotnet_naming_symbols.public_classes.applicable_accessibilities = public
# Internal classes
dotnet_naming_rule.internal_classes.style = pascal_case
dotnet_naming_rule.internal_classes.symbols = internal_classes
dotnet_naming_rule.internal_classes.severity = error
dotnet_naming_symbols.internal_classes.applicable_kinds = class
dotnet_naming_symbols.internal_classes.applicable_accessibilities = internal
# Private classes
dotnet_naming_rule.private_classes.style = pascal_case
dotnet_naming_rule.private_classes.symbols = private_classes
dotnet_naming_rule.private_classes.severity = error
dotnet_naming_symbols.private_classes.applicable_kinds = class
dotnet_naming_symbols.private_classes.applicable_accessibilities = private
# Interfaces
dotnet_naming_rule.interfaces.style = interface_pascal_case
dotnet_naming_rule.interfaces.symbols = interfaces
dotnet_naming_rule.interfaces.severity = error
dotnet_naming_symbols.interfaces.applicable_kinds = interface

# C# Naming Rules (Constants) =================

# Public constants
dotnet_naming_rule.public_constants.style = pascal_case
dotnet_naming_rule.public_constants.symbols = public_constants
dotnet_naming_rule.public_constants.severity = error
dotnet_naming_symbols.public_constants.applicable_kinds = field
dotnet_naming_symbols.public_constants.applicable_accessibilities = public
dotnet_naming_symbols.public_constants.required_modifiers = const
# Internal constants
dotnet_naming_rule.internal_constants.style = pascal_case
dotnet_naming_rule.internal_constants.symbols = internal_constants
dotnet_naming_rule.internal_constants.severity = error
dotnet_naming_symbols.internal_constants.applicable_kinds = field
dotnet_naming_symbols.internal_constants.applicable_accessibilities = internal
dotnet_naming_symbols.internal_constants.required_modifiers = const
# Private constants
dotnet_naming_rule.private_constants.style = camel_case_with_underscore
dotnet_naming_rule.private_constants.symbols = private_constants
dotnet_naming_rule.private_constants.severity = error
dotnet_naming_symbols.private_constants.applicable_kinds = field
dotnet_naming_symbols.private_constants.applicable_accessibilities = private
dotnet_naming_symbols.private_constants.required_modifiers = const

# C# Naming Rules (Fields) =================

# Public fields
dotnet_naming_rule.public_fields.style = pascal_case
dotnet_naming_rule.public_fields.symbols = public_fields
dotnet_naming_rule.public_fields.severity = error
dotnet_naming_symbols.public_fields.applicable_kinds = field
dotnet_naming_symbols.public_fields.applicable_accessibilities = public
# Protected fields
dotnet_naming_rule.protected_fields.style = pascal_case
dotnet_naming_rule.protected_fields.symbols = protected_fields
dotnet_naming_rule.protected_fields.severity = error
dotnet_naming_symbols.protected_fields.applicable_kinds = field
dotnet_naming_symbols.protected_fields.applicable_accessibilities = protected
# Private fields
dotnet_naming_rule.private_fields.style = camel_case_with_underscore
dotnet_naming_rule.private_fields.symbols = private_fields
dotnet_naming_rule.private_fields.severity = error
dotnet_naming_symbols.private_fields.applicable_kinds = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private

# C# Naming Rules (Static fields) =================

# Public static fields
dotnet_naming_rule.public_static_fields.style = pascal_case
dotnet_naming_rule.public_static_fields.symbols = public_static_fields
dotnet_naming_rule.public_static_fields.severity = error
dotnet_naming_symbols.public_static_fields.applicable_kinds = field
dotnet_naming_symbols.public_static_fields.applicable_accessibilities = public
dotnet_naming_symbols.public_static_fields.required_modifiers = static
# Protected static fields
dotnet_naming_rule.protected_static_fields.style = pascal_case
dotnet_naming_rule.protected_static_fields.symbols = protected_static_fields
dotnet_naming_rule.protected_static_fields.severity = error
dotnet_naming_symbols.protected_static_fields.applicable_kinds = field
dotnet_naming_symbols.protected_static_fields.applicable_accessibilities = protected
dotnet_naming_symbols.protected_static_fields.required_modifiers = static
# Private static fields
dotnet_naming_rule.private_static_fields.style = camel_case_with_s
dotnet_naming_rule.private_static_fields.symbols = private_static_fields
dotnet_naming_rule.private_static_fields.severity = error
dotnet_naming_symbols.private_static_fields.applicable_kinds = field
dotnet_naming_symbols.private_static_fields.applicable_accessibilities = private
dotnet_naming_symbols.private_static_fields.required_modifiers = static

# C# Naming Rules (Static readonly fields) =================

# Public static readonly fields
dotnet_naming_rule.public_static_readonly_fields.style = pascal_case
dotnet_naming_rule.public_static_readonly_fields.symbols = public_static_readonly_fields
dotnet_naming_rule.public_static_readonly_fields.severity = error
dotnet_naming_symbols.public_static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.public_static_readonly_fields.applicable_accessibilities = public
dotnet_naming_symbols.public_static_readonly_fields.required_modifiers = static, readonly
# Protected static readonly fields
dotnet_naming_rule.protected_static_readonly_fields.style = pascal_case
dotnet_naming_rule.protected_static_readonly_fields.symbols = protected_static_readonly_fields
dotnet_naming_rule.protected_static_readonly_fields.severity = error
dotnet_naming_symbols.protected_static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.protected_static_readonly_fields.applicable_accessibilities = protected
dotnet_naming_symbols.protected_static_readonly_fields.required_modifiers = static, readonly
# Private static readonly fields
dotnet_naming_rule.private_static_readonly_fields.style = camel_case_with_s
dotnet_naming_rule.private_static_readonly_fields.symbols = private_static_readonly_fields
dotnet_naming_rule.private_static_readonly_fields.severity = error
dotnet_naming_symbols.private_static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.private_static_readonly_fields.applicable_accessibilities = private
dotnet_naming_symbols.private_static_readonly_fields.required_modifiers = static, readonly

# C# Naming Rules (Properties) =================

# Public properties
dotnet_naming_rule.public_properties.style = pascal_case
dotnet_naming_rule.public_properties.symbols = public_properties
dotnet_naming_rule.public_properties.severity = error
dotnet_naming_symbols.public_properties.applicable_kinds = property
dotnet_naming_symbols.public_properties.applicable_accessibilities = public
# Protected properties
dotnet_naming_rule.protected_properties.style = pascal_case
dotnet_naming_rule.protected_properties.symbols = protected_properties
dotnet_naming_rule.protected_properties.severity = error
dotnet_naming_symbols.protected_properties.applicable_kinds = property
dotnet_naming_symbols.protected_properties.applicable_accessibilities = protected
# Private properties
dotnet_naming_rule.private_properties.style = pascal_case
dotnet_naming_rule.private_properties.symbols = private_properties
dotnet_naming_rule.private_properties.severity = error
dotnet_naming_symbols.private_properties.applicable_kinds = property
dotnet_naming_symbols.private_properties.applicable_accessibilities = private

# C# Naming Rules (Methods and Local variables) =================

# Methods
dotnet_naming_rule.methods.style = pascal_case
dotnet_naming_rule.methods.symbols = methods
dotnet_naming_rule.methods.severity = error
dotnet_naming_symbols.methods.applicable_kinds = method
# Protected methods
dotnet_naming_rule.protected_methods.style = pascal_case
dotnet_naming_rule.protected_methods.symbols = protected_methods
dotnet_naming_rule.protected_methods.severity = error
dotnet_naming_symbols.protected_methods.applicable_kinds = method
dotnet_naming_symbols.protected_methods.applicable_accessibilities = protected
# Local variables
dotnet_naming_rule.local_variables.style = camel_case
dotnet_naming_rule.local_variables.symbols = locals
dotnet_naming_rule.local_variables.severity = error
dotnet_naming_symbols.locals.applicable_kinds = local

# C# Naming Rules (Events and Enums) =================

# Events
dotnet_naming_rule.events.style = pascal_case
dotnet_naming_rule.events.symbols = event_symbols
dotnet_naming_rule.events.severity = error
dotnet_naming_symbols.event_symbols.applicable_kinds = event
# Enums
dotnet_naming_rule.enums.style = pascal_case
dotnet_naming_rule.enums.symbols = enum_symbols
dotnet_naming_rule.enums.severity = error
dotnet_naming_symbols.enum_symbols.applicable_kinds = enum

# C# Naming Style Definitions =================

# Pascal Case
dotnet_naming_style.pascal_case.required_prefix =
dotnet_naming_style.pascal_case.required_suffix =
dotnet_naming_style.pascal_case.capitalization = pascal_case
# Camel Case
dotnet_naming_style.camel_case.required_prefix =
dotnet_naming_style.camel_case.required_suffix =
dotnet_naming_style.camel_case.capitalization = camel_case
# _ + Camel Case
dotnet_naming_style.camel_case_with_underscore.required_prefix = _
dotnet_naming_style.camel_case_with_underscore.required_suffix =
dotnet_naming_style.camel_case_with_underscore.capitalization = camel_case
# s_ + Camel Case
dotnet_naming_style.camel_case_with_s.required_prefix = s_
dotnet_naming_style.camel_case_with_s.required_suffix =
dotnet_naming_style.camel_case_with_s.capitalization = camel_case
# I + Pascal Case
dotnet_naming_style.interface_pascal_case.required_prefix = I
dotnet_naming_style.interface_pascal_case.required_suffix =
dotnet_naming_style.interface_pascal_case.capitalization = pascal_case

# File-specific C# Naming Style Settings =================

[Assets/Tests/StyleTest/IgnoreStyleTest.cs]

dotnet_naming_rule.private_fields.style = camel_case
dotnet_naming_rule.private_fields.symbols = private_fields
dotnet_naming_symbols.private_fields.applicable_kinds = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private

dotnet_naming_style.camel_case.capitalization = camel_case